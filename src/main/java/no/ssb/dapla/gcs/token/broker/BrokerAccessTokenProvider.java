package no.ssb.dapla.gcs.token.broker;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Calendar;
import java.util.Date;

import no.ssb.dapla.gcs.oauth.GoogleCredentialsDetails;
import no.ssb.dapla.gcs.oauth.GoogleCredentialsFactory;
import no.ssb.dapla.gcs.token.delegation.BrokerTokenIdentifier;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.security.UserGroupInformation;

import com.google.cloud.hadoop.util.AccessTokenProvider;

// Classes dynamically generated by protobuf-maven-plugin:
//import com.google.cloud.broker.apps.brokerserver.protobuf.GetAccessTokenRequest;
//import com.google.cloud.broker.apps.brokerserver.protobuf.GetAccessTokenResponse;


public final class BrokerAccessTokenProvider implements AccessTokenProvider {

    private Configuration config;
    private AccessToken accessToken;
    private BrokerTokenIdentifier tokenIdentifier;
    private Text service;

    private final static AccessToken EXPIRED_TOKEN = new AccessToken("", -1L);

    public BrokerAccessTokenProvider(Text service) {
        this.service = service;
        this.accessToken = EXPIRED_TOKEN;
    }

    public BrokerAccessTokenProvider(Text service, BrokerTokenIdentifier bti) {
        this.service = service;
        this.tokenIdentifier = bti;
        this.accessToken = EXPIRED_TOKEN;
    }

    @Override
    public AccessToken getAccessToken() {
        return this.accessToken;
    }

    @Override
    public void refresh() {
        UserGroupInformation currentUser;
        UserGroupInformation loginUser;
        try {
            currentUser = UserGroupInformation.getCurrentUser();
            loginUser = UserGroupInformation.getLoginUser();
            System.out.println("current user: " + currentUser.getUserName());
            System.out.println("login user: " + loginUser.getUserName());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        String sessionToken;

        if (tokenIdentifier != null) {
            sessionToken = tokenIdentifier.getSessionToken();
        }
        else {
            sessionToken = null;
        }
        /*
        GetAccessTokenResponse response = loginUser.doAs((PrivilegedAction<GetAccessTokenResponse>) () -> {
            BrokerGateway gateway = new BrokerGateway(config, sessionToken);
            GetAccessTokenRequest request = GetAccessTokenRequest.newBuilder()
                    .setScope(BrokerTokenIdentifier.BROKER_SCOPE)
                    .setOwner(currentUser.getUserName())
                    .setTarget(service.toString())
                    .build();
            GetAccessTokenResponse r = gateway.getStub().getAccessToken(request);
            gateway.getManagedChannel().shutdown();
            return r;
        });

        String tokenString = response.getAccessToken();
        long expiresAt = response.getExpiresAt();
        accessToken = new AccessToken(tokenString, expiresAt);
         */
        System.out.println("Issuing access token");
        try {
            GoogleCredentialsDetails credential = GoogleCredentialsFactory.createCredentialsDetails(true, BrokerTokenIdentifier.BROKER_SCOPE);
            accessToken =  new AccessToken(credential.getAccessToken(), credential.getExpirationTime());
            System.out.println("Expiration time " + new Date(credential.getExpirationTime()));
            try {
                InetAddress ip = InetAddress.getLocalHost();
                String hostName = ip.getHostName();
                System.out.println("Hostname " + hostName);
            } catch (UnknownHostException e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            System.out.println("GoogleCredentialsFactory failed");
            throw new RuntimeException(e);
        }
    }

    @Override
    public void setConf(Configuration config) {
        this.config = config;
    }

    @Override
    public Configuration getConf() {
        return this.config;
    }

}