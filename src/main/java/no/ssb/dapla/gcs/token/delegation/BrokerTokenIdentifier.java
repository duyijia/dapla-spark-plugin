package no.ssb.dapla.gcs.token.delegation;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.security.PrivilegedAction;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.security.UserGroupInformation;
import org.apache.hadoop.security.token.delegation.web.DelegationTokenIdentifier;

// Classes dynamically generated by protobuf-maven-plugin:
//import com.google.cloud.broker.apps.brokerserver.protobuf.GetSessionTokenRequest;
//import com.google.cloud.broker.apps.brokerserver.protobuf.GetSessionTokenResponse;


public class BrokerTokenIdentifier extends DelegationTokenIdentifier {

    public static final Text KIND = new Text("GCPBrokerSessionToken");
    public static final String BROKER_SCOPE = "https://www.googleapis.com/auth/devstorage.read_write";
    private String sessionToken;

    public BrokerTokenIdentifier() {
        super(KIND);
        System.out.println("Creating empty BrokerTokenIdentifier");
    }

    public BrokerTokenIdentifier(Configuration config, Text owner, Text renewer, Text realUser, Text service) {
        super(KIND, owner, renewer, realUser);
        UserGroupInformation currentUser;
        UserGroupInformation loginUser;
        try {
            currentUser = UserGroupInformation.getCurrentUser();
            loginUser = UserGroupInformation.getLoginUser();
            System.out.println("current user: " + currentUser.getUserName());
            System.out.println("login user: " + loginUser.getUserName());
            System.out.println("realUser: " + realUser);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        /*
        GetSessionTokenResponse response = loginUser.doAs((PrivilegedAction<GetSessionTokenResponse>) () -> {
            BrokerGateway gateway = new BrokerGateway(config);
            GetSessionTokenRequest request = GetSessionTokenRequest.newBuilder()
                    .setScope(BROKER_SCOPE)
                    .setOwner(currentUser.getUserName())
                    .setRenewer(renewer.toString())
                    .setTarget(service.toString())
                    .build();
            GetSessionTokenResponse r = gateway.getStub().getSessionToken(request);
            gateway.getManagedChannel().shutdown();
            return r;
        });
        sessionToken = response.getSessionToken();
         */
        System.out.println("Issuing dummy session token");
        sessionToken = "dummySessionToken";
    }

    @Override
    public void write(DataOutput out) throws IOException {
        super.write(out);
        Text.writeString(out, sessionToken);
    }

    @Override
    public void readFields(DataInput in) throws IOException {
        super.readFields(in);
        this.sessionToken = Text.readString(in, 32 * 1024);
    }

    public String getSessionToken(){
        return sessionToken;
    }
}